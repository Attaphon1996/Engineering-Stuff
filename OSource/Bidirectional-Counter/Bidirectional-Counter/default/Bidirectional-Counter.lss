
Bidirectional-Counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000326  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000326  000003ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800066  00800066  000003c0  2**0
                  ALLOC
  3 .noinit       00000000  00800068  00800068  000003c0  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000003c0  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000000b6  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000003c1  00000000  00000000  0000087a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000151  00000000  00000000  00000c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000002ef  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000016e  00000000  00000000  0000107b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 f7 00 	jmp	0x1ee <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__heap_end>

0000008e <write_command>:
}


void write_command(unsigned char comm)
{
  8e:	28 2f       	mov	r18, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
  90:	84 ef       	ldi	r24, 0xF4	; 244
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <write_command+0x6>
void write_command(unsigned char comm)
{
	
	_delay_ms(2);
	LCD_PORT=((comm & 0xF0)|(1<<en)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=0;
  98:	82 2f       	mov	r24, r18
  9a:	80 7f       	andi	r24, 0xF0	; 240
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	88 bb       	out	0x18, r24	; 24
	cbi(LCD_PORT,en);
  a0:	c1 98       	cbi	0x18, 1	; 24
	
	LCD_PORT=((comm<<4)|(1<<en)); 		//Sending 4 LSB bits of command
  a2:	82 2f       	mov	r24, r18
  a4:	99 27       	eor	r25, r25
  a6:	24 e0       	ldi	r18, 0x04	; 4
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	2a 95       	dec	r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <write_command+0x1a>
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	88 bb       	out	0x18, r24	; 24
	cbi(LCD_PORT,en);
  b4:	c1 98       	cbi	0x18, 1	; 24
  b6:	08 95       	ret

000000b8 <lcd_init>:
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_init+0x4>
void lcd_init(void)
{
	_delay_ms(300);
	
	LCD_DDR=0b11110011;					//Initialize the LCD port first
  c0:	83 ef       	ldi	r24, 0xF3	; 243
  c2:	87 bb       	out	0x17, r24	; 23
	
	write_command(0x80);					//initial address of DDRAM for first line
  c4:	80 e8       	ldi	r24, 0x80	; 128
  c6:	0e 94 47 00 	call	0x8e <write_command>
	write_command(0x28);					//To select 4 bit data
  ca:	88 e2       	ldi	r24, 0x28	; 40
  cc:	0e 94 47 00 	call	0x8e <write_command>
		
	write_command(0x0e);					//Command to on the display & cursor blink/blink off
  d0:	8e e0       	ldi	r24, 0x0E	; 14
  d2:	0e 94 47 00 	call	0x8e <write_command>
	write_command(0x01);					//Command to clear LCD display
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 47 00 	call	0x8e <write_command>
	
	write_command(0x06);					//Command for character entry mode
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	0e 94 47 00 	call	0x8e <write_command>
  e2:	08 95       	ret

000000e4 <write_data>:
}


void write_command(unsigned char comm)
{
	
	_delay_ms(2);
	LCD_PORT=((comm & 0xF0)|(1<<en)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=0;
	cbi(LCD_PORT,en);
	
	LCD_PORT=((comm<<4)|(1<<en)); 		//Sending 4 LSB bits of command
	cbi(LCD_PORT,en);
}


 void write_data(unsigned char lcd_data)
{
  e4:	28 2f       	mov	r18, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
  e6:	84 ef       	ldi	r24, 0xF4	; 244
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <write_data+0x6>
 void write_data(unsigned char lcd_data)
{
	_delay_ms(2);
	
	LCD_PORT=((lcd_data & 0xF0)|(1<<en)|(1<<rs)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=1;
  ee:	82 2f       	mov	r24, r18
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	83 60       	ori	r24, 0x03	; 3
  f4:	88 bb       	out	0x18, r24	; 24
	cbi(LCD_PORT,en);
  f6:	c1 98       	cbi	0x18, 1	; 24
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
  f8:	82 2f       	mov	r24, r18
  fa:	99 27       	eor	r25, r25
  fc:	34 e0       	ldi	r19, 0x04	; 4
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	3a 95       	dec	r19
 104:	e1 f7       	brne	.-8      	; 0xfe <write_data+0x1a>
 106:	83 60       	ori	r24, 0x03	; 3
 108:	88 bb       	out	0x18, r24	; 24
	cbi(LCD_PORT,en);
 10a:	c1 98       	cbi	0x18, 1	; 24
 10c:	08 95       	ret

0000010e <lcd_prints>:
}	

void lcd_prints(char *print_str)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	ec 01       	movw	r28, r24
	while(*print_str)
	{
		if(*print_str=='\0')
		break;
		write_data(*print_str);
		print_str++;
 114:	88 81       	ld	r24, Y
 116:	88 23       	and	r24, r24
 118:	49 f0       	breq	.+18     	; 0x12c <lcd_prints+0x1e>
 11a:	88 81       	ld	r24, Y
 11c:	88 23       	and	r24, r24
 11e:	31 f0       	breq	.+12     	; 0x12c <lcd_prints+0x1e>
 120:	0e 94 72 00 	call	0xe4 <write_data>
 124:	21 96       	adiw	r28, 0x01	; 1
 126:	88 81       	ld	r24, Y
 128:	88 23       	and	r24, r24
 12a:	b9 f7       	brne	.-18     	; 0x11a <lcd_prints+0xc>
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <lcd_printi>:
	}
}

void lcd_printi(int num)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	25 97       	sbiw	r28, 0x05	; 5
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
	char buff[]={'0','0','0','0','0'};
 146:	de 01       	movw	r26, r28
 148:	11 96       	adiw	r26, 0x01	; 1
 14a:	e0 e6       	ldi	r30, 0x60	; 96
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	25 e0       	ldi	r18, 0x05	; 5
 150:	01 90       	ld	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	21 50       	subi	r18, 0x01	; 1
 156:	e1 f7       	brne	.-8      	; 0x150 <lcd_printi+0x1e>
	itoa(num,buff,10);
 158:	4a e0       	ldi	r20, 0x0A	; 10
 15a:	50 e0       	ldi	r21, 0x00	; 0
 15c:	be 01       	movw	r22, r28
 15e:	6f 5f       	subi	r22, 0xFF	; 255
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	0e 94 4e 01 	call	0x29c <itoa>
	lcd_prints(buff);
 166:	ce 01       	movw	r24, r28
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	0e 94 87 00 	call	0x10e <lcd_prints>
 16e:	25 96       	adiw	r28, 0x05	; 5
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <lcd_goto>:
}

void lcd_printc(char data)
{
		if(data=='\n')
			lcd_goto(0,2);
		write_data(data);
}
void lcd_goto(uint8_t x,uint8_t y)
{
	if(y==1)
 180:	61 30       	cpi	r22, 0x01	; 1
 182:	21 f4       	brne	.+8      	; 0x18c <lcd_goto+0xc>
		write_command(0x80|x);
 184:	80 68       	ori	r24, 0x80	; 128
 186:	0e 94 47 00 	call	0x8e <write_command>
 18a:	08 95       	ret
	else if(y==2)
 18c:	62 30       	cpi	r22, 0x02	; 2
 18e:	19 f4       	brne	.+6      	; 0x196 <lcd_goto+0x16>
		write_command(0xC0|x);
 190:	80 6c       	ori	r24, 0xC0	; 192
 192:	0e 94 47 00 	call	0x8e <write_command>
 196:	08 95       	ret

00000198 <lcd_printc>:
 198:	cf 93       	push	r28
 19a:	c8 2f       	mov	r28, r24
 19c:	8a 30       	cpi	r24, 0x0A	; 10
 19e:	21 f4       	brne	.+8      	; 0x1a8 <lcd_printc+0x10>
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 c0 00 	call	0x180 <lcd_goto>
 1a8:	8c 2f       	mov	r24, r28
 1aa:	0e 94 72 00 	call	0xe4 <write_data>
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_clrscr>:
}

void lcd_clrscr(void)
{
	write_command(0x01);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 47 00 	call	0x8e <write_command>
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 1b8:	8e ee       	ldi	r24, 0xEE	; 238
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_clrscr+0xa>
void lcd_clrscr(void)
{
	write_command(0x01);
	_delay_ms(3);
	write_command(0x80);
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	0e 94 47 00 	call	0x8e <write_command>
 1c6:	08 95       	ret

000001c8 <init_adc>:
}



//ADC
void init_adc(void)
{
	ADMUX=(1<<REFS0);
 1c8:	80 e4       	ldi	r24, 0x40	; 64
 1ca:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADEN);
 1cc:	87 e8       	ldi	r24, 0x87	; 135
 1ce:	86 b9       	out	0x06, r24	; 6
 1d0:	08 95       	ret

000001d2 <read_adc>:
}

int read_adc(char adc)
{
	ADMUX&=(0b11100000);
 1d2:	97 b1       	in	r25, 0x07	; 7
 1d4:	90 7e       	andi	r25, 0xE0	; 224
 1d6:	97 b9       	out	0x07, r25	; 7
	ADMUX|=(adc);
 1d8:	97 b1       	in	r25, 0x07	; 7
 1da:	98 2b       	or	r25, r24
 1dc:	97 b9       	out	0x07, r25	; 7
	//`ADMUX=0b01
	
	ADCSRA|=(1<<ADEN)|(1<<ADSC);
 1de:	86 b1       	in	r24, 0x06	; 6
 1e0:	80 6c       	ori	r24, 0xC0	; 192
 1e2:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);
 1e4:	34 9b       	sbis	0x06, 4	; 6
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <read_adc+0x12>
	return ADC;
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	95 b1       	in	r25, 0x05	; 5
 1ec:	08 95       	ret

000001ee <main>:
#include<avr/io.h>
#include<util/delay.h>
int count=0;
main()
{
 1ee:	cf e5       	ldi	r28, 0x5F	; 95
 1f0:	d4 e0       	ldi	r29, 0x04	; 4
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	cd bf       	out	0x3d, r28	; 61
int x,y;
lcd_init();
 1f6:	0e 94 5c 00 	call	0xb8 <lcd_init>
lcd_clrscr();
 1fa:	0e 94 d9 00 	call	0x1b2 <lcd_clrscr>
init_adc();
 1fe:	0e 94 e4 00 	call	0x1c8 <init_adc>
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 202:	84 ec       	ldi	r24, 0xC4	; 196
 204:	99 e0       	ldi	r25, 0x09	; 9
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0x18>
_delay_ms(10);
while(1)
{
x=read_adc(0);
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 e9 00 	call	0x1d2 <read_adc>
 210:	8c 01       	movw	r16, r24
y=read_adc(1);
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 e9 00 	call	0x1d2 <read_adc>
 218:	ec 01       	movw	r28, r24

if(x>300)
 21a:	0d 52       	subi	r16, 0x2D	; 45
 21c:	11 40       	sbci	r17, 0x01	; 1
 21e:	ec f0       	brlt	.+58     	; 0x25a <main+0x6c>
{
count++;
 220:	80 91 66 00 	lds	r24, 0x0066
 224:	90 91 67 00 	lds	r25, 0x0067
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	90 93 67 00 	sts	0x0067, r25
 22e:	80 93 66 00 	sts	0x0066, r24
lcd_goto(0,1);
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 c0 00 	call	0x180 <lcd_goto>
lcd_printc('N');
 23a:	8e e4       	ldi	r24, 0x4E	; 78
 23c:	0e 94 cc 00 	call	0x198 <lcd_printc>
lcd_goto(1,1);
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	86 2f       	mov	r24, r22
 244:	0e 94 c0 00 	call	0x180 <lcd_goto>
lcd_printc('=');
 248:	8d e3       	ldi	r24, 0x3D	; 61
 24a:	0e 94 cc 00 	call	0x198 <lcd_printc>
lcd_printi(count);
 24e:	80 91 66 00 	lds	r24, 0x0066
 252:	90 91 67 00 	lds	r25, 0x0067
 256:	0e 94 99 00 	call	0x132 <lcd_printi>


}

if(y<600)
 25a:	c8 55       	subi	r28, 0x58	; 88
 25c:	d2 40       	sbci	r29, 0x02	; 2
 25e:	ac f6       	brge	.-86     	; 0x20a <main+0x1c>
{
count--;
 260:	80 91 66 00 	lds	r24, 0x0066
 264:	90 91 67 00 	lds	r25, 0x0067
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	90 93 67 00 	sts	0x0067, r25
 26e:	80 93 66 00 	sts	0x0066, r24
lcd_goto(0,1);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 c0 00 	call	0x180 <lcd_goto>
lcd_printc('N');
 27a:	8e e4       	ldi	r24, 0x4E	; 78
 27c:	0e 94 cc 00 	call	0x198 <lcd_printc>
lcd_goto(1,1);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	86 2f       	mov	r24, r22
 284:	0e 94 c0 00 	call	0x180 <lcd_goto>
lcd_printc('=');
 288:	8d e3       	ldi	r24, 0x3D	; 61
 28a:	0e 94 cc 00 	call	0x198 <lcd_printc>
lcd_printi(count);
 28e:	80 91 66 00 	lds	r24, 0x0066
 292:	90 91 67 00 	lds	r25, 0x0067
 296:	0e 94 99 00 	call	0x132 <lcd_printi>
 29a:	b7 cf       	rjmp	.-146    	; 0x20a <main+0x1c>

0000029c <itoa>:
 29c:	fb 01       	movw	r30, r22
 29e:	9f 01       	movw	r18, r30
 2a0:	e8 94       	clt
 2a2:	42 30       	cpi	r20, 0x02	; 2
 2a4:	c4 f0       	brlt	.+48     	; 0x2d6 <itoa+0x3a>
 2a6:	45 32       	cpi	r20, 0x25	; 37
 2a8:	b4 f4       	brge	.+44     	; 0x2d6 <itoa+0x3a>
 2aa:	4a 30       	cpi	r20, 0x0A	; 10
 2ac:	29 f4       	brne	.+10     	; 0x2b8 <itoa+0x1c>
 2ae:	97 fb       	bst	r25, 7
 2b0:	1e f4       	brtc	.+6      	; 0x2b8 <itoa+0x1c>
 2b2:	90 95       	com	r25
 2b4:	81 95       	neg	r24
 2b6:	9f 4f       	sbci	r25, 0xFF	; 255
 2b8:	64 2f       	mov	r22, r20
 2ba:	77 27       	eor	r23, r23
 2bc:	0e 94 7f 01 	call	0x2fe <__udivmodhi4>
 2c0:	80 5d       	subi	r24, 0xD0	; 208
 2c2:	8a 33       	cpi	r24, 0x3A	; 58
 2c4:	0c f0       	brlt	.+2      	; 0x2c8 <itoa+0x2c>
 2c6:	89 5d       	subi	r24, 0xD9	; 217
 2c8:	81 93       	st	Z+, r24
 2ca:	cb 01       	movw	r24, r22
 2cc:	00 97       	sbiw	r24, 0x00	; 0
 2ce:	a1 f7       	brne	.-24     	; 0x2b8 <itoa+0x1c>
 2d0:	16 f4       	brtc	.+4      	; 0x2d6 <itoa+0x3a>
 2d2:	5d e2       	ldi	r21, 0x2D	; 45
 2d4:	51 93       	st	Z+, r21
 2d6:	10 82       	st	Z, r1
 2d8:	c9 01       	movw	r24, r18
 2da:	0c 94 6f 01 	jmp	0x2de <strrev>

000002de <strrev>:
 2de:	dc 01       	movw	r26, r24
 2e0:	fc 01       	movw	r30, r24
 2e2:	01 90       	ld	r0, Z+
 2e4:	00 20       	and	r0, r0
 2e6:	e9 f7       	brne	.-6      	; 0x2e2 <strrev+0x4>
 2e8:	32 97       	sbiw	r30, 0x02	; 2
 2ea:	ae 17       	cp	r26, r30
 2ec:	bf 07       	cpc	r27, r31
 2ee:	30 f4       	brcc	.+12     	; 0x2fc <strrev+0x1e>
 2f0:	7c 91       	ld	r23, X
 2f2:	60 81       	ld	r22, Z
 2f4:	70 83       	st	Z, r23
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	6d 93       	st	X+, r22
 2fa:	f7 cf       	rjmp	.-18     	; 0x2ea <strrev+0xc>
 2fc:	08 95       	ret

000002fe <__udivmodhi4>:
 2fe:	aa 1b       	sub	r26, r26
 300:	bb 1b       	sub	r27, r27
 302:	51 e1       	ldi	r21, 0x11	; 17
 304:	07 c0       	rjmp	.+14     	; 0x314 <__udivmodhi4_ep>

00000306 <__udivmodhi4_loop>:
 306:	aa 1f       	adc	r26, r26
 308:	bb 1f       	adc	r27, r27
 30a:	a6 17       	cp	r26, r22
 30c:	b7 07       	cpc	r27, r23
 30e:	10 f0       	brcs	.+4      	; 0x314 <__udivmodhi4_ep>
 310:	a6 1b       	sub	r26, r22
 312:	b7 0b       	sbc	r27, r23

00000314 <__udivmodhi4_ep>:
 314:	88 1f       	adc	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	5a 95       	dec	r21
 31a:	a9 f7       	brne	.-22     	; 0x306 <__udivmodhi4_loop>
 31c:	80 95       	com	r24
 31e:	90 95       	com	r25
 320:	bc 01       	movw	r22, r24
 322:	cd 01       	movw	r24, r26
 324:	08 95       	ret
