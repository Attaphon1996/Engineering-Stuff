
touchscreen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057a  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  0000057a  0000060e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000b2  008000b2  00000660  2**0
                  ALLOC
  3 .noinit       00000000  008000ba  008000ba  00000660  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000660  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000000f8  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000005c8  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000001ac  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000053e  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000015d  00000000  00000000  0000180e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 55 02 	jmp	0x4aa <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__heap_end>

0000008e <write_command>:
}


void write_command(unsigned char comm)
{
  8e:	28 2f       	mov	r18, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
  90:	84 ef       	ldi	r24, 0xF4	; 244
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <write_command+0x6>
void write_command(unsigned char comm)
{
	
	_delay_ms(2);
	LCD_PORT=((comm & 0xF0)|(1<<en)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=0;
  98:	82 2f       	mov	r24, r18
  9a:	80 7f       	andi	r24, 0xF0	; 240
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	88 bb       	out	0x18, r24	; 24
	cbi(LCD_PORT,en);
  a0:	c1 98       	cbi	0x18, 1	; 24
	
	LCD_PORT=((comm<<4)|(1<<en)); 		//Sending 4 LSB bits of command
  a2:	82 2f       	mov	r24, r18
  a4:	99 27       	eor	r25, r25
  a6:	24 e0       	ldi	r18, 0x04	; 4
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	2a 95       	dec	r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <write_command+0x1a>
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	88 bb       	out	0x18, r24	; 24
	cbi(LCD_PORT,en);
  b4:	c1 98       	cbi	0x18, 1	; 24
  b6:	08 95       	ret

000000b8 <lcd_init>:
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_init+0x4>
void lcd_init(void)
{
	_delay_ms(300);
	
	LCD_DDR=0b11110011;					//Initialize the LCD port first
  c0:	83 ef       	ldi	r24, 0xF3	; 243
  c2:	87 bb       	out	0x17, r24	; 23
	
	write_command(0x80);					//initial address of DDRAM for first line
  c4:	80 e8       	ldi	r24, 0x80	; 128
  c6:	0e 94 47 00 	call	0x8e <write_command>
	write_command(0x28);					//To select 4 bit data
  ca:	88 e2       	ldi	r24, 0x28	; 40
  cc:	0e 94 47 00 	call	0x8e <write_command>
		
	write_command(0x0e);					//Command to on the display & cursor blink/blink off
  d0:	8e e0       	ldi	r24, 0x0E	; 14
  d2:	0e 94 47 00 	call	0x8e <write_command>
	write_command(0x01);					//Command to clear LCD display
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 47 00 	call	0x8e <write_command>
	
	write_command(0x06);					//Command for character entry mode
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	0e 94 47 00 	call	0x8e <write_command>
  e2:	08 95       	ret

000000e4 <write_data>:
}


void write_command(unsigned char comm)
{
	
	_delay_ms(2);
	LCD_PORT=((comm & 0xF0)|(1<<en)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=0;
	cbi(LCD_PORT,en);
	
	LCD_PORT=((comm<<4)|(1<<en)); 		//Sending 4 LSB bits of command
	cbi(LCD_PORT,en);
}


 void write_data(unsigned char lcd_data)
{
  e4:	28 2f       	mov	r18, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
  e6:	84 ef       	ldi	r24, 0xF4	; 244
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <write_data+0x6>
 void write_data(unsigned char lcd_data)
{
	_delay_ms(2);
	
	LCD_PORT=((lcd_data & 0xF0)|(1<<en)|(1<<rs)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=1;
  ee:	82 2f       	mov	r24, r18
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	83 60       	ori	r24, 0x03	; 3
  f4:	88 bb       	out	0x18, r24	; 24
	cbi(LCD_PORT,en);
  f6:	c1 98       	cbi	0x18, 1	; 24
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
  f8:	82 2f       	mov	r24, r18
  fa:	99 27       	eor	r25, r25
  fc:	34 e0       	ldi	r19, 0x04	; 4
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	3a 95       	dec	r19
 104:	e1 f7       	brne	.-8      	; 0xfe <write_data+0x1a>
 106:	83 60       	ori	r24, 0x03	; 3
 108:	88 bb       	out	0x18, r24	; 24
	cbi(LCD_PORT,en);
 10a:	c1 98       	cbi	0x18, 1	; 24
 10c:	08 95       	ret

0000010e <lcd_prints>:
}	

void lcd_prints(char *print_str)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	ec 01       	movw	r28, r24
	while(*print_str)
	{
		if(*print_str=='\0')
		break;
		write_data(*print_str);
		print_str++;
 114:	88 81       	ld	r24, Y
 116:	88 23       	and	r24, r24
 118:	49 f0       	breq	.+18     	; 0x12c <lcd_prints+0x1e>
 11a:	88 81       	ld	r24, Y
 11c:	88 23       	and	r24, r24
 11e:	31 f0       	breq	.+12     	; 0x12c <lcd_prints+0x1e>
 120:	0e 94 72 00 	call	0xe4 <write_data>
 124:	21 96       	adiw	r28, 0x01	; 1
 126:	88 81       	ld	r24, Y
 128:	88 23       	and	r24, r24
 12a:	b9 f7       	brne	.-18     	; 0x11a <lcd_prints+0xc>
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <lcd_printi>:
	}
}

void lcd_printi(int num)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	25 97       	sbiw	r28, 0x05	; 5
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
	char buff[]={'0','0','0','0','0'};
 146:	de 01       	movw	r26, r28
 148:	11 96       	adiw	r26, 0x01	; 1
 14a:	e0 e6       	ldi	r30, 0x60	; 96
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	25 e0       	ldi	r18, 0x05	; 5
 150:	01 90       	ld	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	21 50       	subi	r18, 0x01	; 1
 156:	e1 f7       	brne	.-8      	; 0x150 <lcd_printi+0x1e>
	itoa(num,buff,10);
 158:	4a e0       	ldi	r20, 0x0A	; 10
 15a:	50 e0       	ldi	r21, 0x00	; 0
 15c:	be 01       	movw	r22, r28
 15e:	6f 5f       	subi	r22, 0xFF	; 255
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	0e 94 78 02 	call	0x4f0 <itoa>
	lcd_prints(buff);
 166:	ce 01       	movw	r24, r28
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	0e 94 87 00 	call	0x10e <lcd_prints>
 16e:	25 96       	adiw	r28, 0x05	; 5
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <lcd_goto>:
}

void lcd_printc(char data)
{
		if(data=='\n')
			lcd_goto(0,2);
		write_data(data);
}
void lcd_goto(uint8_t x,uint8_t y)
{
	if(y==1)
 180:	61 30       	cpi	r22, 0x01	; 1
 182:	21 f4       	brne	.+8      	; 0x18c <lcd_goto+0xc>
		write_command(0x80|x);
 184:	80 68       	ori	r24, 0x80	; 128
 186:	0e 94 47 00 	call	0x8e <write_command>
 18a:	08 95       	ret
	else if(y==2)
 18c:	62 30       	cpi	r22, 0x02	; 2
 18e:	19 f4       	brne	.+6      	; 0x196 <lcd_goto+0x16>
		write_command(0xC0|x);
 190:	80 6c       	ori	r24, 0xC0	; 192
 192:	0e 94 47 00 	call	0x8e <write_command>
 196:	08 95       	ret

00000198 <lcd_printc>:
 198:	cf 93       	push	r28
 19a:	c8 2f       	mov	r28, r24
 19c:	8a 30       	cpi	r24, 0x0A	; 10
 19e:	21 f4       	brne	.+8      	; 0x1a8 <lcd_printc+0x10>
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 c0 00 	call	0x180 <lcd_goto>
 1a8:	8c 2f       	mov	r24, r28
 1aa:	0e 94 72 00 	call	0xe4 <write_data>
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_clrscr>:
}

void lcd_clrscr(void)
{
	write_command(0x01);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 47 00 	call	0x8e <write_command>
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 1b8:	8e ee       	ldi	r24, 0xEE	; 238
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_clrscr+0xa>
void lcd_clrscr(void)
{
	write_command(0x01);
	_delay_ms(3);
	write_command(0x80);
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	0e 94 47 00 	call	0x8e <write_command>
 1c6:	08 95       	ret

000001c8 <init_adc>:
}



//ADC
void init_adc(void)
{
	ADMUX=(1<<REFS0);
 1c8:	80 e4       	ldi	r24, 0x40	; 64
 1ca:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADEN);
 1cc:	87 e8       	ldi	r24, 0x87	; 135
 1ce:	86 b9       	out	0x06, r24	; 6
 1d0:	08 95       	ret

000001d2 <read_adc>:
}

int read_adc(char adc)
{
	ADMUX&=(0b11100000);
 1d2:	97 b1       	in	r25, 0x07	; 7
 1d4:	90 7e       	andi	r25, 0xE0	; 224
 1d6:	97 b9       	out	0x07, r25	; 7
	ADMUX|=(adc);
 1d8:	97 b1       	in	r25, 0x07	; 7
 1da:	98 2b       	or	r25, r24
 1dc:	97 b9       	out	0x07, r25	; 7
	//`ADMUX=0b01
	
	ADCSRA|=(1<<ADEN)|(1<<ADSC);
 1de:	86 b1       	in	r24, 0x06	; 6
 1e0:	80 6c       	ori	r24, 0xC0	; 192
 1e2:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);
 1e4:	34 9b       	sbis	0x06, 4	; 6
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <read_adc+0x12>
	return ADC;
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	95 b1       	in	r25, 0x05	; 5
 1ec:	08 95       	ret

000001ee <xcd>:
int x,y,z,v;

int xcd()
{
       DDRA |= (1<<DDA0); 
 1ee:	d0 9a       	sbi	0x1a, 0	; 26
	   DDRA &= ~(1<<DDA1);
 1f0:	d1 98       	cbi	0x1a, 1	; 26
       DDRA |= (1<<DDA2); 
 1f2:	d2 9a       	sbi	0x1a, 2	; 26
       DDRA &= ~(1<<DDA3);  
 1f4:	d3 98       	cbi	0x1a, 3	; 26
       PORTA |= (1<<PA0);
 1f6:	d8 9a       	sbi	0x1b, 0	; 27
	   PORTA |= (1<<PA1); 
 1f8:	d9 9a       	sbi	0x1b, 1	; 27
       PORTA &= ~(1<<PA2); 
 1fa:	da 98       	cbi	0x1b, 2	; 27
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 1fc:	84 ec       	ldi	r24, 0xC4	; 196
 1fe:	99 e0       	ldi	r25, 0x09	; 9
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <xcd+0x12>
       PORTA &= ~(1<<PA2); 
       _delay_ms(10); 

	   
        x=read_adc(1);
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 e9 00 	call	0x1d2 <read_adc>
 20a:	90 93 b3 00 	sts	0x00B3, r25
 20e:	80 93 b2 00 	sts	0x00B2, r24
		//_delay_ms(1000);

	   
	   lcd_clrscr();
 212:	0e 94 d9 00 	call	0x1b2 <lcd_clrscr>
	   lcd_goto(0,1);
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 c0 00 	call	0x180 <lcd_goto>
	   lcd_prints("X=");
 21e:	85 e6       	ldi	r24, 0x65	; 101
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 87 00 	call	0x10e <lcd_prints>
	   lcd_goto(3,1);
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	0e 94 c0 00 	call	0x180 <lcd_goto>
	   lcd_printi(x); //Display value on LCD
 22e:	80 91 b2 00 	lds	r24, 0x00B2
 232:	90 91 b3 00 	lds	r25, 0x00B3
 236:	0e 94 99 00 	call	0x132 <lcd_printi>
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 23a:	84 ed       	ldi	r24, 0xD4	; 212
 23c:	90 e3       	ldi	r25, 0x30	; 48
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <xcd+0x50>
	   /*DDRA |= (1<<DDA0); 
	   DDRA |= (1<<DDA1); 
       DDRA |= (1<<DDA2); 
       DDRA |= (1<<DDA3);*/ 
}
 242:	80 91 b2 00 	lds	r24, 0x00B2
 246:	90 91 b3 00 	lds	r25, 0x00B3
 24a:	08 95       	ret

0000024c <ycd>:
int ycd()
{
       DDRA &= ~(1<<DDA0);
 24c:	d0 98       	cbi	0x1a, 0	; 26
       DDRA |= (1<<DDA1); 
 24e:	d1 9a       	sbi	0x1a, 1	; 26
       DDRA |= (1<<DDA3); 
 250:	d3 9a       	sbi	0x1a, 3	; 26
       DDRA &= ~(1<<DDA2); 
 252:	d2 98       	cbi	0x1a, 2	; 26


       PORTA |= (1<<PA0);
 254:	d8 9a       	sbi	0x1b, 0	; 27
       PORTA |= (1<<PA1); 
 256:	d9 9a       	sbi	0x1b, 1	; 27
       PORTA &= ~(1<<PA3); 
 258:	db 98       	cbi	0x1b, 3	; 27
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 25a:	84 ec       	ldi	r24, 0xC4	; 196
 25c:	99 e0       	ldi	r25, 0x09	; 9
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <ycd+0x12>
       PORTA |= (1<<PA1); 
       PORTA &= ~(1<<PA3); 
       _delay_ms(10); 
	  
        y=read_adc(0); 
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 e9 00 	call	0x1d2 <read_adc>
 268:	90 93 b9 00 	sts	0x00B9, r25
 26c:	80 93 b8 00 	sts	0x00B8, r24
		//_delay_ms(1000);
	
   	   lcd_clrscr();
 270:	0e 94 d9 00 	call	0x1b2 <lcd_clrscr>
	   lcd_goto(0,2);
 274:	62 e0       	ldi	r22, 0x02	; 2
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 c0 00 	call	0x180 <lcd_goto>
	   lcd_prints("Y=");
 27c:	88 e6       	ldi	r24, 0x68	; 104
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 87 00 	call	0x10e <lcd_prints>
	   lcd_goto(3,2);
 284:	62 e0       	ldi	r22, 0x02	; 2
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	0e 94 c0 00 	call	0x180 <lcd_goto>
	   lcd_printi(y); //Display value on LCD
 28c:	80 91 b8 00 	lds	r24, 0x00B8
 290:	90 91 b9 00 	lds	r25, 0x00B9
 294:	0e 94 99 00 	call	0x132 <lcd_printi>
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 298:	84 ed       	ldi	r24, 0xD4	; 212
 29a:	90 e3       	ldi	r25, 0x30	; 48
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <ycd+0x50>
	
	
	   _delay_ms(50);
	  return(y);
}
 2a0:	80 91 b8 00 	lds	r24, 0x00B8
 2a4:	90 91 b9 00 	lds	r25, 0x00B9
 2a8:	08 95       	ret

000002aa <xc>:
void xc()
{
       DDRA |= (1<<DDA0); 
 2aa:	d0 9a       	sbi	0x1a, 0	; 26
	   DDRA &= ~(1<<DDA1);
 2ac:	d1 98       	cbi	0x1a, 1	; 26
       DDRA |= (1<<DDA2); 
 2ae:	d2 9a       	sbi	0x1a, 2	; 26
       DDRA &= ~(1<<DDA3);  
 2b0:	d3 98       	cbi	0x1a, 3	; 26
       PORTA |= (1<<PA0);
 2b2:	d8 9a       	sbi	0x1b, 0	; 27
	   PORTA |= (1<<PA1); 
 2b4:	d9 9a       	sbi	0x1b, 1	; 27
       PORTA &= ~(1<<PA2); 
 2b6:	da 98       	cbi	0x1b, 2	; 27
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 2b8:	84 ec       	ldi	r24, 0xC4	; 196
 2ba:	99 e0       	ldi	r25, 0x09	; 9
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <xc+0x12>
       PORTA &= ~(1<<PA2); 
       _delay_ms(10); 

	   
        x=read_adc(1);
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 e9 00 	call	0x1d2 <read_adc>
 2c6:	90 93 b3 00 	sts	0x00B3, r25
 2ca:	80 93 b2 00 	sts	0x00B2, r24
 2ce:	08 95       	ret

000002d0 <yc>:
		

	  
	   
}
void yc()
{
       DDRA &= ~(1<<DDA0);
 2d0:	d0 98       	cbi	0x1a, 0	; 26
       DDRA |= (1<<DDA1); 
 2d2:	d1 9a       	sbi	0x1a, 1	; 26
       DDRA |= (1<<DDA3); 
 2d4:	d3 9a       	sbi	0x1a, 3	; 26
       DDRA &= ~(1<<DDA2); 
 2d6:	d2 98       	cbi	0x1a, 2	; 26


       PORTA |= (1<<PA0);
 2d8:	d8 9a       	sbi	0x1b, 0	; 27
       PORTA |= (1<<PA1); 
 2da:	d9 9a       	sbi	0x1b, 1	; 27
       PORTA &= ~(1<<PA3); 
 2dc:	db 98       	cbi	0x1b, 3	; 27
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 2de:	84 ec       	ldi	r24, 0xC4	; 196
 2e0:	99 e0       	ldi	r25, 0x09	; 9
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <yc+0x12>
       PORTA |= (1<<PA1); 
       PORTA &= ~(1<<PA3); 
       _delay_ms(10); 
	  
        y=read_adc(0); 
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 e9 00 	call	0x1d2 <read_adc>
 2ec:	90 93 b9 00 	sts	0x00B9, r25
 2f0:	80 93 b8 00 	sts	0x00B8, r24
 2f4:	08 95       	ret

000002f6 <quadrant>:
	
	  
}

quadrant()
{
 if(x>171 && x<517 && y>146 && y<517)
 2f6:	20 91 b2 00 	lds	r18, 0x00B2
 2fa:	30 91 b3 00 	lds	r19, 0x00B3
 2fe:	c9 01       	movw	r24, r18
 300:	8c 5a       	subi	r24, 0xAC	; 172
 302:	90 40       	sbci	r25, 0x00	; 0
 304:	89 55       	subi	r24, 0x59	; 89
 306:	91 40       	sbci	r25, 0x01	; 1
 308:	98 f4       	brcc	.+38     	; 0x330 <quadrant+0x3a>
 30a:	80 91 b8 00 	lds	r24, 0x00B8
 30e:	90 91 b9 00 	lds	r25, 0x00B9
 312:	83 39       	cpi	r24, 0x93	; 147
 314:	91 05       	cpc	r25, r1
 316:	64 f0       	brlt	.+24     	; 0x330 <quadrant+0x3a>
 318:	85 50       	subi	r24, 0x05	; 5
 31a:	92 40       	sbci	r25, 0x02	; 2
 31c:	4c f4       	brge	.+18     	; 0x330 <quadrant+0x3a>
	   {
	   lcd_clrscr();
 31e:	0e 94 d9 00 	call	0x1b2 <lcd_clrscr>
	   lcd_goto(0,2);
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 c0 00 	call	0x180 <lcd_goto>
	   lcd_prints("Second Quadrant");
 32a:	8b e6       	ldi	r24, 0x6B	; 107
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	18 c0       	rjmp	.+48     	; 0x360 <quadrant+0x6a>
	     
	   }
	   
       else if(x<863&& x>517 && y>146 && y<517)
 330:	c9 01       	movw	r24, r18
 332:	86 50       	subi	r24, 0x06	; 6
 334:	92 40       	sbci	r25, 0x02	; 2
 336:	89 55       	subi	r24, 0x59	; 89
 338:	91 40       	sbci	r25, 0x01	; 1
 33a:	a8 f4       	brcc	.+42     	; 0x366 <quadrant+0x70>
 33c:	80 91 b8 00 	lds	r24, 0x00B8
 340:	90 91 b9 00 	lds	r25, 0x00B9
 344:	83 39       	cpi	r24, 0x93	; 147
 346:	91 05       	cpc	r25, r1
 348:	74 f0       	brlt	.+28     	; 0x366 <quadrant+0x70>
 34a:	85 50       	subi	r24, 0x05	; 5
 34c:	92 40       	sbci	r25, 0x02	; 2
 34e:	5c f4       	brge	.+22     	; 0x366 <quadrant+0x70>
	   {
	   lcd_clrscr();
 350:	0e 94 d9 00 	call	0x1b2 <lcd_clrscr>
       lcd_goto(0,2);
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 c0 00 	call	0x180 <lcd_goto>
	   lcd_prints("First Quadrant");
 35c:	8b e7       	ldi	r24, 0x7B	; 123
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 87 00 	call	0x10e <lcd_prints>
 364:	08 95       	ret
	     

	   }
	   else if(x>517 && x<863 && y>517 && y<880)
 366:	c9 01       	movw	r24, r18
 368:	86 50       	subi	r24, 0x06	; 6
 36a:	92 40       	sbci	r25, 0x02	; 2
 36c:	89 55       	subi	r24, 0x59	; 89
 36e:	91 40       	sbci	r25, 0x01	; 1
 370:	a0 f4       	brcc	.+40     	; 0x39a <quadrant+0xa4>
 372:	80 91 b8 00 	lds	r24, 0x00B8
 376:	90 91 b9 00 	lds	r25, 0x00B9
 37a:	42 e0       	ldi	r20, 0x02	; 2
 37c:	86 30       	cpi	r24, 0x06	; 6
 37e:	94 07       	cpc	r25, r20
 380:	64 f0       	brlt	.+24     	; 0x39a <quadrant+0xa4>
 382:	80 57       	subi	r24, 0x70	; 112
 384:	93 40       	sbci	r25, 0x03	; 3
 386:	4c f4       	brge	.+18     	; 0x39a <quadrant+0xa4>
	   {
	   lcd_clrscr();
 388:	0e 94 d9 00 	call	0x1b2 <lcd_clrscr>
        lcd_goto(0,2);
 38c:	62 e0       	ldi	r22, 0x02	; 2
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 c0 00 	call	0x180 <lcd_goto>
	   lcd_prints("Fourth Quadrant");
 394:	8a e8       	ldi	r24, 0x8A	; 138
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	e3 cf       	rjmp	.-58     	; 0x360 <quadrant+0x6a>
	   }
	   else if(x>171 && x<517 && y>517 && y<880)
 39a:	2c 5a       	subi	r18, 0xAC	; 172
 39c:	30 40       	sbci	r19, 0x00	; 0
 39e:	29 55       	subi	r18, 0x59	; 89
 3a0:	31 40       	sbci	r19, 0x01	; 1
 3a2:	a8 f4       	brcc	.+42     	; 0x3ce <quadrant+0xd8>
 3a4:	80 91 b8 00 	lds	r24, 0x00B8
 3a8:	90 91 b9 00 	lds	r25, 0x00B9
 3ac:	22 e0       	ldi	r18, 0x02	; 2
 3ae:	86 30       	cpi	r24, 0x06	; 6
 3b0:	92 07       	cpc	r25, r18
 3b2:	6c f0       	brlt	.+26     	; 0x3ce <quadrant+0xd8>
 3b4:	80 57       	subi	r24, 0x70	; 112
 3b6:	93 40       	sbci	r25, 0x03	; 3
 3b8:	54 f4       	brge	.+20     	; 0x3ce <quadrant+0xd8>
	   {
	   lcd_clrscr();
 3ba:	0e 94 d9 00 	call	0x1b2 <lcd_clrscr>
	    lcd_goto(0,2);
 3be:	62 e0       	ldi	r22, 0x02	; 2
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 c0 00 	call	0x180 <lcd_goto>
	   lcd_prints("Third Quadrant");
 3c6:	8a e9       	ldi	r24, 0x9A	; 154
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 87 00 	call	0x10e <lcd_prints>
	   }
}
 3ce:	08 95       	ret

000003d0 <test>:

test()
{
 if(x>171 && x<517 && y>146 && y<517)
 3d0:	20 91 b2 00 	lds	r18, 0x00B2
 3d4:	30 91 b3 00 	lds	r19, 0x00B3
 3d8:	c9 01       	movw	r24, r18
 3da:	8c 5a       	subi	r24, 0xAC	; 172
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	89 55       	subi	r24, 0x59	; 89
 3e0:	91 40       	sbci	r25, 0x01	; 1
 3e2:	98 f4       	brcc	.+38     	; 0x40a <test+0x3a>
 3e4:	80 91 b8 00 	lds	r24, 0x00B8
 3e8:	90 91 b9 00 	lds	r25, 0x00B9
 3ec:	83 39       	cpi	r24, 0x93	; 147
 3ee:	91 05       	cpc	r25, r1
 3f0:	64 f0       	brlt	.+24     	; 0x40a <test+0x3a>
 3f2:	85 50       	subi	r24, 0x05	; 5
 3f4:	92 40       	sbci	r25, 0x02	; 2
 3f6:	4c f4       	brge	.+18     	; 0x40a <test+0x3a>
	   {
	   lcd_clrscr();
 3f8:	0e 94 d9 00 	call	0x1b2 <lcd_clrscr>
	   lcd_goto(1,1);
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	86 2f       	mov	r24, r22
 400:	0e 94 c0 00 	call	0x180 <lcd_goto>
	   lcd_prints("B");
 404:	89 ea       	ldi	r24, 0xA9	; 169
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	18 c0       	rjmp	.+48     	; 0x43a <test+0x6a>
	     
	   }
	   
       else if(x<863&& x>517 && y>146 && y<517)
 40a:	c9 01       	movw	r24, r18
 40c:	86 50       	subi	r24, 0x06	; 6
 40e:	92 40       	sbci	r25, 0x02	; 2
 410:	89 55       	subi	r24, 0x59	; 89
 412:	91 40       	sbci	r25, 0x01	; 1
 414:	a8 f4       	brcc	.+42     	; 0x440 <test+0x70>
 416:	80 91 b8 00 	lds	r24, 0x00B8
 41a:	90 91 b9 00 	lds	r25, 0x00B9
 41e:	83 39       	cpi	r24, 0x93	; 147
 420:	91 05       	cpc	r25, r1
 422:	74 f0       	brlt	.+28     	; 0x440 <test+0x70>
 424:	85 50       	subi	r24, 0x05	; 5
 426:	92 40       	sbci	r25, 0x02	; 2
 428:	5c f4       	brge	.+22     	; 0x440 <test+0x70>
	   {
	   lcd_clrscr();
 42a:	0e 94 d9 00 	call	0x1b2 <lcd_clrscr>
       lcd_goto(14,1);
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	8e e0       	ldi	r24, 0x0E	; 14
 432:	0e 94 c0 00 	call	0x180 <lcd_goto>
	   lcd_prints("A");
 436:	8b ea       	ldi	r24, 0xAB	; 171
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 87 00 	call	0x10e <lcd_prints>
 43e:	08 95       	ret
	     

	   }
	   else if(x>517 && x<863 && y>517 && y<880)
 440:	c9 01       	movw	r24, r18
 442:	86 50       	subi	r24, 0x06	; 6
 444:	92 40       	sbci	r25, 0x02	; 2
 446:	89 55       	subi	r24, 0x59	; 89
 448:	91 40       	sbci	r25, 0x01	; 1
 44a:	a0 f4       	brcc	.+40     	; 0x474 <__stack+0x15>
 44c:	80 91 b8 00 	lds	r24, 0x00B8
 450:	90 91 b9 00 	lds	r25, 0x00B9
 454:	42 e0       	ldi	r20, 0x02	; 2
 456:	86 30       	cpi	r24, 0x06	; 6
 458:	94 07       	cpc	r25, r20
 45a:	64 f0       	brlt	.+24     	; 0x474 <__stack+0x15>
 45c:	80 57       	subi	r24, 0x70	; 112
 45e:	93 40       	sbci	r25, 0x03	; 3
 460:	4c f4       	brge	.+18     	; 0x474 <__stack+0x15>
	   {
	   lcd_clrscr();
 462:	0e 94 d9 00 	call	0x1b2 <lcd_clrscr>
           lcd_goto(14,2);
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	8e e0       	ldi	r24, 0x0E	; 14
 46a:	0e 94 c0 00 	call	0x180 <lcd_goto>
	   lcd_prints("D");
 46e:	8d ea       	ldi	r24, 0xAD	; 173
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	e3 cf       	rjmp	.-58     	; 0x43a <test+0x6a>
	   }
	   else if(x>171 && x<517 && y>517 && y<880)
 474:	2c 5a       	subi	r18, 0xAC	; 172
 476:	30 40       	sbci	r19, 0x00	; 0
 478:	29 55       	subi	r18, 0x59	; 89
 47a:	31 40       	sbci	r19, 0x01	; 1
 47c:	a8 f4       	brcc	.+42     	; 0x4a8 <__stack+0x49>
 47e:	80 91 b8 00 	lds	r24, 0x00B8
 482:	90 91 b9 00 	lds	r25, 0x00B9
 486:	22 e0       	ldi	r18, 0x02	; 2
 488:	86 30       	cpi	r24, 0x06	; 6
 48a:	92 07       	cpc	r25, r18
 48c:	6c f0       	brlt	.+26     	; 0x4a8 <__stack+0x49>
 48e:	80 57       	subi	r24, 0x70	; 112
 490:	93 40       	sbci	r25, 0x03	; 3
 492:	54 f4       	brge	.+20     	; 0x4a8 <__stack+0x49>
	   {
	   lcd_clrscr();
 494:	0e 94 d9 00 	call	0x1b2 <lcd_clrscr>
	    lcd_goto(1,2);
 498:	62 e0       	ldi	r22, 0x02	; 2
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 c0 00 	call	0x180 <lcd_goto>
	   lcd_prints("C");
 4a0:	8f ea       	ldi	r24, 0xAF	; 175
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 87 00 	call	0x10e <lcd_prints>
	   }
}
 4a8:	08 95       	ret

000004aa <main>:
#include<tecxtra.h>
#include<util/delay.h>
#include<touch.h>
main()
{
 4aa:	cf e5       	ldi	r28, 0x5F	; 95
 4ac:	d4 e0       	ldi	r29, 0x04	; 4
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	cd bf       	out	0x3d, r28	; 61
lcd_init();
 4b2:	0e 94 5c 00 	call	0xb8 <lcd_init>
DDRD=0b11111111;
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	81 bb       	out	0x11, r24	; 17
PORTD=0b00000000;
 4ba:	12 ba       	out	0x12, r1	; 18
init_adc();
 4bc:	0e 94 e4 00 	call	0x1c8 <init_adc>
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 4c0:	84 ec       	ldi	r24, 0xC4	; 196
 4c2:	99 e0       	ldi	r25, 0x09	; 9
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <main+0x1a>
int x,y;
_delay_ms(10);
while(1)
{
x=xcd();
 4c8:	0e 94 f7 00 	call	0x1ee <xcd>
 4cc:	ec 01       	movw	r28, r24
y=ycd();
 4ce:	0e 94 26 01 	call	0x24c <ycd>


if((x>550) && (x<900))
 4d2:	ce 01       	movw	r24, r28
 4d4:	87 52       	subi	r24, 0x27	; 39
 4d6:	92 40       	sbci	r25, 0x02	; 2
 4d8:	8d 55       	subi	r24, 0x5D	; 93
 4da:	91 40       	sbci	r25, 0x01	; 1
 4dc:	10 f4       	brcc	.+4      	; 0x4e2 <main+0x38>
{
PORTD=0b11110000;
 4de:	80 ef       	ldi	r24, 0xF0	; 240
 4e0:	82 bb       	out	0x12, r24	; 18
}
if((x>150) && (x<500))
 4e2:	c7 59       	subi	r28, 0x97	; 151
 4e4:	d0 40       	sbci	r29, 0x00	; 0
 4e6:	cd 55       	subi	r28, 0x5D	; 93
 4e8:	d1 40       	sbci	r29, 0x01	; 1
 4ea:	70 f7       	brcc	.-36     	; 0x4c8 <main+0x1e>
{
PORTD=0b00000000;
 4ec:	12 ba       	out	0x12, r1	; 18
 4ee:	ec cf       	rjmp	.-40     	; 0x4c8 <main+0x1e>

000004f0 <itoa>:
 4f0:	fb 01       	movw	r30, r22
 4f2:	9f 01       	movw	r18, r30
 4f4:	e8 94       	clt
 4f6:	42 30       	cpi	r20, 0x02	; 2
 4f8:	c4 f0       	brlt	.+48     	; 0x52a <itoa+0x3a>
 4fa:	45 32       	cpi	r20, 0x25	; 37
 4fc:	b4 f4       	brge	.+44     	; 0x52a <itoa+0x3a>
 4fe:	4a 30       	cpi	r20, 0x0A	; 10
 500:	29 f4       	brne	.+10     	; 0x50c <itoa+0x1c>
 502:	97 fb       	bst	r25, 7
 504:	1e f4       	brtc	.+6      	; 0x50c <itoa+0x1c>
 506:	90 95       	com	r25
 508:	81 95       	neg	r24
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	64 2f       	mov	r22, r20
 50e:	77 27       	eor	r23, r23
 510:	0e 94 a9 02 	call	0x552 <__udivmodhi4>
 514:	80 5d       	subi	r24, 0xD0	; 208
 516:	8a 33       	cpi	r24, 0x3A	; 58
 518:	0c f0       	brlt	.+2      	; 0x51c <itoa+0x2c>
 51a:	89 5d       	subi	r24, 0xD9	; 217
 51c:	81 93       	st	Z+, r24
 51e:	cb 01       	movw	r24, r22
 520:	00 97       	sbiw	r24, 0x00	; 0
 522:	a1 f7       	brne	.-24     	; 0x50c <itoa+0x1c>
 524:	16 f4       	brtc	.+4      	; 0x52a <itoa+0x3a>
 526:	5d e2       	ldi	r21, 0x2D	; 45
 528:	51 93       	st	Z+, r21
 52a:	10 82       	st	Z, r1
 52c:	c9 01       	movw	r24, r18
 52e:	0c 94 99 02 	jmp	0x532 <strrev>

00000532 <strrev>:
 532:	dc 01       	movw	r26, r24
 534:	fc 01       	movw	r30, r24
 536:	01 90       	ld	r0, Z+
 538:	00 20       	and	r0, r0
 53a:	e9 f7       	brne	.-6      	; 0x536 <strrev+0x4>
 53c:	32 97       	sbiw	r30, 0x02	; 2
 53e:	ae 17       	cp	r26, r30
 540:	bf 07       	cpc	r27, r31
 542:	30 f4       	brcc	.+12     	; 0x550 <strrev+0x1e>
 544:	7c 91       	ld	r23, X
 546:	60 81       	ld	r22, Z
 548:	70 83       	st	Z, r23
 54a:	31 97       	sbiw	r30, 0x01	; 1
 54c:	6d 93       	st	X+, r22
 54e:	f7 cf       	rjmp	.-18     	; 0x53e <strrev+0xc>
 550:	08 95       	ret

00000552 <__udivmodhi4>:
 552:	aa 1b       	sub	r26, r26
 554:	bb 1b       	sub	r27, r27
 556:	51 e1       	ldi	r21, 0x11	; 17
 558:	07 c0       	rjmp	.+14     	; 0x568 <__udivmodhi4_ep>

0000055a <__udivmodhi4_loop>:
 55a:	aa 1f       	adc	r26, r26
 55c:	bb 1f       	adc	r27, r27
 55e:	a6 17       	cp	r26, r22
 560:	b7 07       	cpc	r27, r23
 562:	10 f0       	brcs	.+4      	; 0x568 <__udivmodhi4_ep>
 564:	a6 1b       	sub	r26, r22
 566:	b7 0b       	sbc	r27, r23

00000568 <__udivmodhi4_ep>:
 568:	88 1f       	adc	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	5a 95       	dec	r21
 56e:	a9 f7       	brne	.-22     	; 0x55a <__udivmodhi4_loop>
 570:	80 95       	com	r24
 572:	90 95       	com	r25
 574:	bc 01       	movw	r22, r24
 576:	cd 01       	movw	r24, r26
 578:	08 95       	ret
